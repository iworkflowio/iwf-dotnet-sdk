/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using IwfDotnetSdk.ApiClients.Client;
using IwfDotnetSdk.ApiClients.Model;

namespace IwfDotnetSdk.ApiClients.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// update the config of a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1WorkflowConfigUpdatePost(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0);

        /// <summary>
        /// update the config of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1WorkflowConfigUpdatePostWithHttpInfo(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0);
        /// <summary>
        /// get workflow data objects aka data attributes
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetDataObjectsResponse</returns>
        WorkflowGetDataObjectsResponse ApiV1WorkflowDataobjectsGetPost(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0);

        /// <summary>
        /// get workflow data objects aka data attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetDataObjectsResponse</returns>
        ApiResponse<WorkflowGetDataObjectsResponse> ApiV1WorkflowDataobjectsGetPostWithHttpInfo(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0);
        /// <summary>
        /// set workflow data objects aka data attributes
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1WorkflowDataobjectsSetPost(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0);

        /// <summary>
        /// set workflow data objects aka data attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1WorkflowDataobjectsSetPostWithHttpInfo(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0);
        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested)
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetResponse</returns>
        WorkflowGetResponse ApiV1WorkflowGetPost(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0);

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetResponse</returns>
        ApiResponse<WorkflowGetResponse> ApiV1WorkflowGetPostWithHttpInfo(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0);
        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetResponse</returns>
        WorkflowGetResponse ApiV1WorkflowGetWithWaitPost(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0);

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetResponse</returns>
        ApiResponse<WorkflowGetResponse> ApiV1WorkflowGetWithWaitPostWithHttpInfo(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0);
        /// <summary>
        /// dump internal info of a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowDumpResponse</returns>
        WorkflowDumpResponse ApiV1WorkflowInternalDumpPost(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0);

        /// <summary>
        /// dump internal info of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowDumpResponse</returns>
        ApiResponse<WorkflowDumpResponse> ApiV1WorkflowInternalDumpPostWithHttpInfo(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0);
        /// <summary>
        /// reset a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowResetResponse</returns>
        WorkflowResetResponse ApiV1WorkflowResetPost(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0);

        /// <summary>
        /// reset a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowResetResponse</returns>
        ApiResponse<WorkflowResetResponse> ApiV1WorkflowResetPostWithHttpInfo(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0);
        /// <summary>
        /// execute an RPC of a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowRpcResponse</returns>
        WorkflowRpcResponse ApiV1WorkflowRpcPost(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0);

        /// <summary>
        /// execute an RPC of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowRpcResponse</returns>
        ApiResponse<WorkflowRpcResponse> ApiV1WorkflowRpcPostWithHttpInfo(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0);
        /// <summary>
        /// search for workflows by a search attribute query
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowSearchResponse</returns>
        WorkflowSearchResponse ApiV1WorkflowSearchPost(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0);

        /// <summary>
        /// search for workflows by a search attribute query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowSearchResponse</returns>
        ApiResponse<WorkflowSearchResponse> ApiV1WorkflowSearchPostWithHttpInfo(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0);
        /// <summary>
        /// get workflow search attributes
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetSearchAttributesResponse</returns>
        WorkflowGetSearchAttributesResponse ApiV1WorkflowSearchattributesGetPost(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0);

        /// <summary>
        /// get workflow search attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetSearchAttributesResponse</returns>
        ApiResponse<WorkflowGetSearchAttributesResponse> ApiV1WorkflowSearchattributesGetPostWithHttpInfo(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0);
        /// <summary>
        /// set workflow search attributes
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1WorkflowSearchattributesSetPost(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0);

        /// <summary>
        /// set workflow search attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1WorkflowSearchattributesSetPostWithHttpInfo(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0);
        /// <summary>
        /// signal a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1WorkflowSignalPost(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0);

        /// <summary>
        /// signal a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1WorkflowSignalPostWithHttpInfo(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0);
        /// <summary>
        /// start a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowStartResponse</returns>
        WorkflowStartResponse ApiV1WorkflowStartPost(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0);

        /// <summary>
        /// start a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowStartResponse</returns>
        ApiResponse<WorkflowStartResponse> ApiV1WorkflowStartPostWithHttpInfo(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0);
        /// <summary>
        /// for invoking WorkflowState.execute API
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowStateExecuteResponse</returns>
        WorkflowStateExecuteResponse ApiV1WorkflowStateDecidePost(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0);

        /// <summary>
        /// for invoking WorkflowState.execute API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowStateExecuteResponse</returns>
        ApiResponse<WorkflowStateExecuteResponse> ApiV1WorkflowStateDecidePostWithHttpInfo(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0);
        /// <summary>
        /// for invoking WorkflowState.waitUntil API
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowStateWaitUntilResponse</returns>
        WorkflowStateWaitUntilResponse ApiV1WorkflowStateStartPost(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0);

        /// <summary>
        /// for invoking WorkflowState.waitUntil API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowStateWaitUntilResponse</returns>
        ApiResponse<WorkflowStateWaitUntilResponse> ApiV1WorkflowStateStartPostWithHttpInfo(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0);
        /// <summary>
        /// stop a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1WorkflowStopPost(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0);

        /// <summary>
        /// stop a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1WorkflowStopPostWithHttpInfo(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0);
        /// <summary>
        /// skip the timer of a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1WorkflowTimerSkipPost(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0);

        /// <summary>
        /// skip the timer of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1WorkflowTimerSkipPostWithHttpInfo(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0);
        /// <summary>
        /// trigger ContinueAsNew for a workflow
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiV1WorkflowTriggerContinueAsNewPost(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0);

        /// <summary>
        /// trigger ContinueAsNew for a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1WorkflowTriggerContinueAsNewPostWithHttpInfo(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowWaitForStateCompletionResponse</returns>
        WorkflowWaitForStateCompletionResponse ApiV1WorkflowWaitForStateCompletionPost(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowWaitForStateCompletionResponse</returns>
        ApiResponse<WorkflowWaitForStateCompletionResponse> ApiV1WorkflowWaitForStateCompletionPostWithHttpInfo(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0);
        /// <summary>
        /// for invoking workflow RPC API in the worker
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowWorkerRpcResponse</returns>
        WorkflowWorkerRpcResponse ApiV1WorkflowWorkerRpcPost(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0);

        /// <summary>
        /// for invoking workflow RPC API in the worker
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowWorkerRpcResponse</returns>
        ApiResponse<WorkflowWorkerRpcResponse> ApiV1WorkflowWorkerRpcPostWithHttpInfo(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0);
        /// <summary>
        /// return health info of the server
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthInfo</returns>
        HealthInfo InfoHealthcheckGet(int operationIndex = 0);

        /// <summary>
        /// return health info of the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthInfo</returns>
        ApiResponse<HealthInfo> InfoHealthcheckGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// update the config of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1WorkflowConfigUpdatePostAsync(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// update the config of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1WorkflowConfigUpdatePostWithHttpInfoAsync(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// get workflow data objects aka data attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetDataObjectsResponse</returns>
        System.Threading.Tasks.Task<WorkflowGetDataObjectsResponse> ApiV1WorkflowDataobjectsGetPostAsync(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// get workflow data objects aka data attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetDataObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowGetDataObjectsResponse>> ApiV1WorkflowDataobjectsGetPostWithHttpInfoAsync(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// set workflow data objects aka data attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1WorkflowDataobjectsSetPostAsync(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// set workflow data objects aka data attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1WorkflowDataobjectsSetPostWithHttpInfoAsync(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetResponse</returns>
        System.Threading.Tasks.Task<WorkflowGetResponse> ApiV1WorkflowGetPostAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowGetResponse>> ApiV1WorkflowGetPostWithHttpInfoAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetResponse</returns>
        System.Threading.Tasks.Task<WorkflowGetResponse> ApiV1WorkflowGetWithWaitPostAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowGetResponse>> ApiV1WorkflowGetWithWaitPostWithHttpInfoAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// dump internal info of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowDumpResponse</returns>
        System.Threading.Tasks.Task<WorkflowDumpResponse> ApiV1WorkflowInternalDumpPostAsync(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// dump internal info of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowDumpResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowDumpResponse>> ApiV1WorkflowInternalDumpPostWithHttpInfoAsync(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// reset a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowResetResponse</returns>
        System.Threading.Tasks.Task<WorkflowResetResponse> ApiV1WorkflowResetPostAsync(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// reset a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowResetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowResetResponse>> ApiV1WorkflowResetPostWithHttpInfoAsync(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// execute an RPC of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowRpcResponse</returns>
        System.Threading.Tasks.Task<WorkflowRpcResponse> ApiV1WorkflowRpcPostAsync(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// execute an RPC of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowRpcResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowRpcResponse>> ApiV1WorkflowRpcPostWithHttpInfoAsync(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// search for workflows by a search attribute query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSearchResponse</returns>
        System.Threading.Tasks.Task<WorkflowSearchResponse> ApiV1WorkflowSearchPostAsync(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// search for workflows by a search attribute query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSearchResponse>> ApiV1WorkflowSearchPostWithHttpInfoAsync(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// get workflow search attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetSearchAttributesResponse</returns>
        System.Threading.Tasks.Task<WorkflowGetSearchAttributesResponse> ApiV1WorkflowSearchattributesGetPostAsync(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// get workflow search attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetSearchAttributesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowGetSearchAttributesResponse>> ApiV1WorkflowSearchattributesGetPostWithHttpInfoAsync(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// set workflow search attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1WorkflowSearchattributesSetPostAsync(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// set workflow search attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1WorkflowSearchattributesSetPostWithHttpInfoAsync(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// signal a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1WorkflowSignalPostAsync(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// signal a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1WorkflowSignalPostWithHttpInfoAsync(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// start a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowStartResponse</returns>
        System.Threading.Tasks.Task<WorkflowStartResponse> ApiV1WorkflowStartPostAsync(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// start a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowStartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowStartResponse>> ApiV1WorkflowStartPostWithHttpInfoAsync(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// for invoking WorkflowState.execute API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowStateExecuteResponse</returns>
        System.Threading.Tasks.Task<WorkflowStateExecuteResponse> ApiV1WorkflowStateDecidePostAsync(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// for invoking WorkflowState.execute API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowStateExecuteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowStateExecuteResponse>> ApiV1WorkflowStateDecidePostWithHttpInfoAsync(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// for invoking WorkflowState.waitUntil API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowStateWaitUntilResponse</returns>
        System.Threading.Tasks.Task<WorkflowStateWaitUntilResponse> ApiV1WorkflowStateStartPostAsync(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// for invoking WorkflowState.waitUntil API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowStateWaitUntilResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowStateWaitUntilResponse>> ApiV1WorkflowStateStartPostWithHttpInfoAsync(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// stop a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1WorkflowStopPostAsync(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// stop a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1WorkflowStopPostWithHttpInfoAsync(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// skip the timer of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1WorkflowTimerSkipPostAsync(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// skip the timer of a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1WorkflowTimerSkipPostWithHttpInfoAsync(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// trigger ContinueAsNew for a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1WorkflowTriggerContinueAsNewPostAsync(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// trigger ContinueAsNew for a workflow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1WorkflowTriggerContinueAsNewPostWithHttpInfoAsync(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowWaitForStateCompletionResponse</returns>
        System.Threading.Tasks.Task<WorkflowWaitForStateCompletionResponse> ApiV1WorkflowWaitForStateCompletionPostAsync(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowWaitForStateCompletionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowWaitForStateCompletionResponse>> ApiV1WorkflowWaitForStateCompletionPostWithHttpInfoAsync(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// for invoking workflow RPC API in the worker
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowWorkerRpcResponse</returns>
        System.Threading.Tasks.Task<WorkflowWorkerRpcResponse> ApiV1WorkflowWorkerRpcPostAsync(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// for invoking workflow RPC API in the worker
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowWorkerRpcResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowWorkerRpcResponse>> ApiV1WorkflowWorkerRpcPostWithHttpInfoAsync(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// return health info of the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthInfo</returns>
        System.Threading.Tasks.Task<HealthInfo> InfoHealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// return health info of the server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthInfo>> InfoHealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IwfDotnetSdk.ApiClients.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = IwfDotnetSdk.ApiClients.Client.Configuration.MergeConfigurations(
                IwfDotnetSdk.ApiClients.Client.GlobalConfiguration.Instance,
                new IwfDotnetSdk.ApiClients.Client.Configuration { BasePath = basePath }
            );
            this.Client = new IwfDotnetSdk.ApiClients.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IwfDotnetSdk.ApiClients.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = IwfDotnetSdk.ApiClients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IwfDotnetSdk.ApiClients.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = IwfDotnetSdk.ApiClients.Client.Configuration.MergeConfigurations(
                IwfDotnetSdk.ApiClients.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new IwfDotnetSdk.ApiClients.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new IwfDotnetSdk.ApiClients.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = IwfDotnetSdk.ApiClients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(IwfDotnetSdk.ApiClients.Client.ISynchronousClient client, IwfDotnetSdk.ApiClients.Client.IAsynchronousClient asyncClient, IwfDotnetSdk.ApiClients.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = IwfDotnetSdk.ApiClients.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IwfDotnetSdk.ApiClients.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public IwfDotnetSdk.ApiClients.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IwfDotnetSdk.ApiClients.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IwfDotnetSdk.ApiClients.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// update the config of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1WorkflowConfigUpdatePost(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0)
        {
            ApiV1WorkflowConfigUpdatePostWithHttpInfo(workflowConfigUpdateRequest);
        }

        /// <summary>
        /// update the config of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<Object> ApiV1WorkflowConfigUpdatePostWithHttpInfo(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowConfigUpdateRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowConfigUpdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/workflow/config/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowConfigUpdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// update the config of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1WorkflowConfigUpdatePostAsync(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV1WorkflowConfigUpdatePostWithHttpInfoAsync(workflowConfigUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// update the config of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowConfigUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<Object>> ApiV1WorkflowConfigUpdatePostWithHttpInfoAsync(WorkflowConfigUpdateRequest? workflowConfigUpdateRequest = default(WorkflowConfigUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowConfigUpdateRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowConfigUpdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/workflow/config/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowConfigUpdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetDataObjectsResponse</returns>
        public WorkflowGetDataObjectsResponse ApiV1WorkflowDataobjectsGetPost(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetDataObjectsResponse> localVarResponse = ApiV1WorkflowDataobjectsGetPostWithHttpInfo(workflowGetDataObjectsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetDataObjectsResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetDataObjectsResponse> ApiV1WorkflowDataobjectsGetPostWithHttpInfo(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetDataObjectsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowDataobjectsGetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowGetDataObjectsResponse>("/api/v1/workflow/dataobjects/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowDataobjectsGetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetDataObjectsResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowGetDataObjectsResponse> ApiV1WorkflowDataobjectsGetPostAsync(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetDataObjectsResponse> localVarResponse = await ApiV1WorkflowDataobjectsGetPostWithHttpInfoAsync(workflowGetDataObjectsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetDataObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetDataObjectsResponse>> ApiV1WorkflowDataobjectsGetPostWithHttpInfoAsync(WorkflowGetDataObjectsRequest? workflowGetDataObjectsRequest = default(WorkflowGetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetDataObjectsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowDataobjectsGetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowGetDataObjectsResponse>("/api/v1/workflow/dataobjects/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowDataobjectsGetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// set workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1WorkflowDataobjectsSetPost(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0)
        {
            ApiV1WorkflowDataobjectsSetPostWithHttpInfo(workflowSetDataObjectsRequest);
        }

        /// <summary>
        /// set workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<Object> ApiV1WorkflowDataobjectsSetPostWithHttpInfo(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSetDataObjectsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowDataobjectsSetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/workflow/dataobjects/set", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowDataobjectsSetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// set workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1WorkflowDataobjectsSetPostAsync(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV1WorkflowDataobjectsSetPostWithHttpInfoAsync(workflowSetDataObjectsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// set workflow data objects aka data attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetDataObjectsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<Object>> ApiV1WorkflowDataobjectsSetPostWithHttpInfoAsync(WorkflowSetDataObjectsRequest? workflowSetDataObjectsRequest = default(WorkflowSetDataObjectsRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSetDataObjectsRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowDataobjectsSetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/workflow/dataobjects/set", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowDataobjectsSetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested) 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetResponse</returns>
        public WorkflowGetResponse ApiV1WorkflowGetPost(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse> localVarResponse = ApiV1WorkflowGetPostWithHttpInfo(workflowGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested) 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse> ApiV1WorkflowGetPostWithHttpInfo(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowGetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowGetResponse>("/api/v1/workflow/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowGetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested) 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowGetResponse> ApiV1WorkflowGetPostAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse> localVarResponse = await ApiV1WorkflowGetPostWithHttpInfoAsync(workflowGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested) 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse>> ApiV1WorkflowGetPostWithHttpInfoAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowGetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowGetResponse>("/api/v1/workflow/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowGetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetResponse</returns>
        public WorkflowGetResponse ApiV1WorkflowGetWithWaitPost(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse> localVarResponse = ApiV1WorkflowGetWithWaitPostWithHttpInfo(workflowGetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse> ApiV1WorkflowGetWithWaitPostWithHttpInfo(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowGetWithWaitPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowGetResponse>("/api/v1/workflow/getWithWait", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowGetWithWaitPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowGetResponse> ApiV1WorkflowGetWithWaitPostAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse> localVarResponse = await ApiV1WorkflowGetWithWaitPostWithHttpInfoAsync(workflowGetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get a workflow&#39;s status and results(if completed &amp; requested), wait if the workflow is still running 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetResponse>> ApiV1WorkflowGetWithWaitPostWithHttpInfoAsync(WorkflowGetRequest? workflowGetRequest = default(WorkflowGetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowGetWithWaitPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowGetResponse>("/api/v1/workflow/getWithWait", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowGetWithWaitPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// dump internal info of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowDumpResponse</returns>
        public WorkflowDumpResponse ApiV1WorkflowInternalDumpPost(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowDumpResponse> localVarResponse = ApiV1WorkflowInternalDumpPostWithHttpInfo(workflowDumpRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// dump internal info of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowDumpResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowDumpResponse> ApiV1WorkflowInternalDumpPostWithHttpInfo(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDumpRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowInternalDumpPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowDumpResponse>("/api/v1/workflow/internal/dump", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowInternalDumpPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// dump internal info of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowDumpResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowDumpResponse> ApiV1WorkflowInternalDumpPostAsync(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowDumpResponse> localVarResponse = await ApiV1WorkflowInternalDumpPostWithHttpInfoAsync(workflowDumpRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// dump internal info of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowDumpRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowDumpResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowDumpResponse>> ApiV1WorkflowInternalDumpPostWithHttpInfoAsync(WorkflowDumpRequest? workflowDumpRequest = default(WorkflowDumpRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowDumpRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowInternalDumpPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowDumpResponse>("/api/v1/workflow/internal/dump", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowInternalDumpPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// reset a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowResetResponse</returns>
        public WorkflowResetResponse ApiV1WorkflowResetPost(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowResetResponse> localVarResponse = ApiV1WorkflowResetPostWithHttpInfo(workflowResetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// reset a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowResetResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowResetResponse> ApiV1WorkflowResetPostWithHttpInfo(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowResetRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowResetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowResetResponse>("/api/v1/workflow/reset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowResetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// reset a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowResetResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowResetResponse> ApiV1WorkflowResetPostAsync(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowResetResponse> localVarResponse = await ApiV1WorkflowResetPostWithHttpInfoAsync(workflowResetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// reset a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowResetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowResetResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowResetResponse>> ApiV1WorkflowResetPostWithHttpInfoAsync(WorkflowResetRequest? workflowResetRequest = default(WorkflowResetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowResetRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowResetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowResetResponse>("/api/v1/workflow/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowResetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// execute an RPC of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowRpcResponse</returns>
        public WorkflowRpcResponse ApiV1WorkflowRpcPost(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowRpcResponse> localVarResponse = ApiV1WorkflowRpcPostWithHttpInfo(workflowRpcRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// execute an RPC of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowRpcResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowRpcResponse> ApiV1WorkflowRpcPostWithHttpInfo(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowRpcRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowRpcPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowRpcResponse>("/api/v1/workflow/rpc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowRpcPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// execute an RPC of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowRpcResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowRpcResponse> ApiV1WorkflowRpcPostAsync(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowRpcResponse> localVarResponse = await ApiV1WorkflowRpcPostWithHttpInfoAsync(workflowRpcRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// execute an RPC of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowRpcResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowRpcResponse>> ApiV1WorkflowRpcPostWithHttpInfoAsync(WorkflowRpcRequest? workflowRpcRequest = default(WorkflowRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowRpcRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowRpcPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowRpcResponse>("/api/v1/workflow/rpc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowRpcPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search for workflows by a search attribute query 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowSearchResponse</returns>
        public WorkflowSearchResponse ApiV1WorkflowSearchPost(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowSearchResponse> localVarResponse = ApiV1WorkflowSearchPostWithHttpInfo(workflowSearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search for workflows by a search attribute query 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowSearchResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowSearchResponse> ApiV1WorkflowSearchPostWithHttpInfo(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSearchRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSearchPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowSearchResponse>("/api/v1/workflow/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// search for workflows by a search attribute query 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowSearchResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowSearchResponse> ApiV1WorkflowSearchPostAsync(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowSearchResponse> localVarResponse = await ApiV1WorkflowSearchPostWithHttpInfoAsync(workflowSearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// search for workflows by a search attribute query 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSearchRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowSearchResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowSearchResponse>> ApiV1WorkflowSearchPostWithHttpInfoAsync(WorkflowSearchRequest? workflowSearchRequest = default(WorkflowSearchRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSearchRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSearchPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowSearchResponse>("/api/v1/workflow/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowGetSearchAttributesResponse</returns>
        public WorkflowGetSearchAttributesResponse ApiV1WorkflowSearchattributesGetPost(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetSearchAttributesResponse> localVarResponse = ApiV1WorkflowSearchattributesGetPostWithHttpInfo(workflowGetSearchAttributesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowGetSearchAttributesResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetSearchAttributesResponse> ApiV1WorkflowSearchattributesGetPostWithHttpInfo(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetSearchAttributesRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSearchattributesGetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowGetSearchAttributesResponse>("/api/v1/workflow/searchattributes/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSearchattributesGetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// get workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowGetSearchAttributesResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowGetSearchAttributesResponse> ApiV1WorkflowSearchattributesGetPostAsync(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetSearchAttributesResponse> localVarResponse = await ApiV1WorkflowSearchattributesGetPostWithHttpInfoAsync(workflowGetSearchAttributesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// get workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowGetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowGetSearchAttributesResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowGetSearchAttributesResponse>> ApiV1WorkflowSearchattributesGetPostWithHttpInfoAsync(WorkflowGetSearchAttributesRequest? workflowGetSearchAttributesRequest = default(WorkflowGetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowGetSearchAttributesRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSearchattributesGetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowGetSearchAttributesResponse>("/api/v1/workflow/searchattributes/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSearchattributesGetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// set workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1WorkflowSearchattributesSetPost(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0)
        {
            ApiV1WorkflowSearchattributesSetPostWithHttpInfo(workflowSetSearchAttributesRequest);
        }

        /// <summary>
        /// set workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<Object> ApiV1WorkflowSearchattributesSetPostWithHttpInfo(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSetSearchAttributesRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSearchattributesSetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/workflow/searchattributes/set", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSearchattributesSetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// set workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1WorkflowSearchattributesSetPostAsync(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV1WorkflowSearchattributesSetPostWithHttpInfoAsync(workflowSetSearchAttributesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// set workflow search attributes 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSetSearchAttributesRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<Object>> ApiV1WorkflowSearchattributesSetPostWithHttpInfoAsync(WorkflowSetSearchAttributesRequest? workflowSetSearchAttributesRequest = default(WorkflowSetSearchAttributesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSetSearchAttributesRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSearchattributesSetPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/workflow/searchattributes/set", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSearchattributesSetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// signal a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1WorkflowSignalPost(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0)
        {
            ApiV1WorkflowSignalPostWithHttpInfo(workflowSignalRequest);
        }

        /// <summary>
        /// signal a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<Object> ApiV1WorkflowSignalPostWithHttpInfo(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSignalRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSignalPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/workflow/signal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSignalPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// signal a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1WorkflowSignalPostAsync(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV1WorkflowSignalPostWithHttpInfoAsync(workflowSignalRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// signal a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSignalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<Object>> ApiV1WorkflowSignalPostWithHttpInfoAsync(WorkflowSignalRequest? workflowSignalRequest = default(WorkflowSignalRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSignalRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowSignalPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/workflow/signal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowSignalPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// start a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowStartResponse</returns>
        public WorkflowStartResponse ApiV1WorkflowStartPost(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStartResponse> localVarResponse = ApiV1WorkflowStartPostWithHttpInfo(workflowStartRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// start a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowStartResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStartResponse> ApiV1WorkflowStartPostWithHttpInfo(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStartRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStartPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowStartResponse>("/api/v1/workflow/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStartPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// start a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowStartResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowStartResponse> ApiV1WorkflowStartPostAsync(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStartResponse> localVarResponse = await ApiV1WorkflowStartPostWithHttpInfoAsync(workflowStartRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// start a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStartRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowStartResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStartResponse>> ApiV1WorkflowStartPostWithHttpInfoAsync(WorkflowStartRequest? workflowStartRequest = default(WorkflowStartRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStartRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStartPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowStartResponse>("/api/v1/workflow/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStartPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// for invoking WorkflowState.execute API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowStateExecuteResponse</returns>
        public WorkflowStateExecuteResponse ApiV1WorkflowStateDecidePost(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateExecuteResponse> localVarResponse = ApiV1WorkflowStateDecidePostWithHttpInfo(workflowStateExecuteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// for invoking WorkflowState.execute API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowStateExecuteResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateExecuteResponse> ApiV1WorkflowStateDecidePostWithHttpInfo(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStateExecuteRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStateDecidePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowStateExecuteResponse>("/api/v1/workflowState/decide", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStateDecidePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// for invoking WorkflowState.execute API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowStateExecuteResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowStateExecuteResponse> ApiV1WorkflowStateDecidePostAsync(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateExecuteResponse> localVarResponse = await ApiV1WorkflowStateDecidePostWithHttpInfoAsync(workflowStateExecuteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// for invoking WorkflowState.execute API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateExecuteRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowStateExecuteResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateExecuteResponse>> ApiV1WorkflowStateDecidePostWithHttpInfoAsync(WorkflowStateExecuteRequest? workflowStateExecuteRequest = default(WorkflowStateExecuteRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStateExecuteRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStateDecidePost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowStateExecuteResponse>("/api/v1/workflowState/decide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStateDecidePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// for invoking WorkflowState.waitUntil API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowStateWaitUntilResponse</returns>
        public WorkflowStateWaitUntilResponse ApiV1WorkflowStateStartPost(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateWaitUntilResponse> localVarResponse = ApiV1WorkflowStateStartPostWithHttpInfo(workflowStateWaitUntilRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// for invoking WorkflowState.waitUntil API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowStateWaitUntilResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateWaitUntilResponse> ApiV1WorkflowStateStartPostWithHttpInfo(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStateWaitUntilRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStateStartPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowStateWaitUntilResponse>("/api/v1/workflowState/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStateStartPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// for invoking WorkflowState.waitUntil API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowStateWaitUntilResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowStateWaitUntilResponse> ApiV1WorkflowStateStartPostAsync(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateWaitUntilResponse> localVarResponse = await ApiV1WorkflowStateStartPostWithHttpInfoAsync(workflowStateWaitUntilRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// for invoking WorkflowState.waitUntil API 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStateWaitUntilRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowStateWaitUntilResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowStateWaitUntilResponse>> ApiV1WorkflowStateStartPostWithHttpInfoAsync(WorkflowStateWaitUntilRequest? workflowStateWaitUntilRequest = default(WorkflowStateWaitUntilRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStateWaitUntilRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStateStartPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowStateWaitUntilResponse>("/api/v1/workflowState/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStateStartPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// stop a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1WorkflowStopPost(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0)
        {
            ApiV1WorkflowStopPostWithHttpInfo(workflowStopRequest);
        }

        /// <summary>
        /// stop a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<Object> ApiV1WorkflowStopPostWithHttpInfo(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStopRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStopPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/workflow/stop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStopPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// stop a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1WorkflowStopPostAsync(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV1WorkflowStopPostWithHttpInfoAsync(workflowStopRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// stop a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowStopRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<Object>> ApiV1WorkflowStopPostWithHttpInfoAsync(WorkflowStopRequest? workflowStopRequest = default(WorkflowStopRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowStopRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowStopPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/workflow/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowStopPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// skip the timer of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1WorkflowTimerSkipPost(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0)
        {
            ApiV1WorkflowTimerSkipPostWithHttpInfo(workflowSkipTimerRequest);
        }

        /// <summary>
        /// skip the timer of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<Object> ApiV1WorkflowTimerSkipPostWithHttpInfo(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSkipTimerRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowTimerSkipPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/workflow/timer/skip", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowTimerSkipPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// skip the timer of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1WorkflowTimerSkipPostAsync(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV1WorkflowTimerSkipPostWithHttpInfoAsync(workflowSkipTimerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// skip the timer of a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowSkipTimerRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<Object>> ApiV1WorkflowTimerSkipPostWithHttpInfoAsync(WorkflowSkipTimerRequest? workflowSkipTimerRequest = default(WorkflowSkipTimerRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowSkipTimerRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowTimerSkipPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/workflow/timer/skip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowTimerSkipPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// trigger ContinueAsNew for a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiV1WorkflowTriggerContinueAsNewPost(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0)
        {
            ApiV1WorkflowTriggerContinueAsNewPostWithHttpInfo(triggerContinueAsNewRequest);
        }

        /// <summary>
        /// trigger ContinueAsNew for a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<Object> ApiV1WorkflowTriggerContinueAsNewPostWithHttpInfo(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = triggerContinueAsNewRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowTriggerContinueAsNewPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v1/workflow/triggerContinueAsNew", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowTriggerContinueAsNewPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// trigger ContinueAsNew for a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1WorkflowTriggerContinueAsNewPostAsync(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiV1WorkflowTriggerContinueAsNewPostWithHttpInfoAsync(triggerContinueAsNewRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// trigger ContinueAsNew for a workflow 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerContinueAsNewRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<Object>> ApiV1WorkflowTriggerContinueAsNewPostWithHttpInfoAsync(TriggerContinueAsNewRequest? triggerContinueAsNewRequest = default(TriggerContinueAsNewRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = triggerContinueAsNewRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowTriggerContinueAsNewPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v1/workflow/triggerContinueAsNew", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowTriggerContinueAsNewPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowWaitForStateCompletionResponse</returns>
        public WorkflowWaitForStateCompletionResponse ApiV1WorkflowWaitForStateCompletionPost(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWaitForStateCompletionResponse> localVarResponse = ApiV1WorkflowWaitForStateCompletionPostWithHttpInfo(workflowWaitForStateCompletionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowWaitForStateCompletionResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWaitForStateCompletionResponse> ApiV1WorkflowWaitForStateCompletionPostWithHttpInfo(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowWaitForStateCompletionRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowWaitForStateCompletionPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowWaitForStateCompletionResponse>("/api/v1/workflow/waitForStateCompletion", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowWaitForStateCompletionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowWaitForStateCompletionResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowWaitForStateCompletionResponse> ApiV1WorkflowWaitForStateCompletionPostAsync(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWaitForStateCompletionResponse> localVarResponse = await ApiV1WorkflowWaitForStateCompletionPostWithHttpInfoAsync(workflowWaitForStateCompletionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWaitForStateCompletionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowWaitForStateCompletionResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWaitForStateCompletionResponse>> ApiV1WorkflowWaitForStateCompletionPostWithHttpInfoAsync(WorkflowWaitForStateCompletionRequest? workflowWaitForStateCompletionRequest = default(WorkflowWaitForStateCompletionRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowWaitForStateCompletionRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowWaitForStateCompletionPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowWaitForStateCompletionResponse>("/api/v1/workflow/waitForStateCompletion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowWaitForStateCompletionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// for invoking workflow RPC API in the worker 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WorkflowWorkerRpcResponse</returns>
        public WorkflowWorkerRpcResponse ApiV1WorkflowWorkerRpcPost(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWorkerRpcResponse> localVarResponse = ApiV1WorkflowWorkerRpcPostWithHttpInfo(workflowWorkerRpcRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// for invoking workflow RPC API in the worker 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WorkflowWorkerRpcResponse</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWorkerRpcResponse> ApiV1WorkflowWorkerRpcPostWithHttpInfo(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowWorkerRpcRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowWorkerRpcPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WorkflowWorkerRpcResponse>("/api/v1/workflowWorker/rpc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowWorkerRpcPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// for invoking workflow RPC API in the worker 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WorkflowWorkerRpcResponse</returns>
        public async System.Threading.Tasks.Task<WorkflowWorkerRpcResponse> ApiV1WorkflowWorkerRpcPostAsync(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWorkerRpcResponse> localVarResponse = await ApiV1WorkflowWorkerRpcPostWithHttpInfoAsync(workflowWorkerRpcRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// for invoking workflow RPC API in the worker 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="workflowWorkerRpcRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WorkflowWorkerRpcResponse)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<WorkflowWorkerRpcResponse>> ApiV1WorkflowWorkerRpcPostWithHttpInfoAsync(WorkflowWorkerRpcRequest? workflowWorkerRpcRequest = default(WorkflowWorkerRpcRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = workflowWorkerRpcRequest;

            localVarRequestOptions.Operation = "DefaultApi.ApiV1WorkflowWorkerRpcPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WorkflowWorkerRpcResponse>("/api/v1/workflowWorker/rpc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1WorkflowWorkerRpcPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// return health info of the server 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthInfo</returns>
        public HealthInfo InfoHealthcheckGet(int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<HealthInfo> localVarResponse = InfoHealthcheckGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// return health info of the server 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthInfo</returns>
        public IwfDotnetSdk.ApiClients.Client.ApiResponse<HealthInfo> InfoHealthcheckGetWithHttpInfo(int operationIndex = 0)
        {
            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.InfoHealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HealthInfo>("/info/healthcheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoHealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// return health info of the server 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthInfo</returns>
        public async System.Threading.Tasks.Task<HealthInfo> InfoHealthcheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            IwfDotnetSdk.ApiClients.Client.ApiResponse<HealthInfo> localVarResponse = await InfoHealthcheckGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// return health info of the server 
        /// </summary>
        /// <exception cref="IwfDotnetSdk.ApiClients.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthInfo)</returns>
        public async System.Threading.Tasks.Task<IwfDotnetSdk.ApiClients.Client.ApiResponse<HealthInfo>> InfoHealthcheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            IwfDotnetSdk.ApiClients.Client.RequestOptions localVarRequestOptions = new IwfDotnetSdk.ApiClients.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = IwfDotnetSdk.ApiClients.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.InfoHealthcheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HealthInfo>("/info/healthcheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoHealthcheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
