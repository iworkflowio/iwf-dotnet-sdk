/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// StateCompletionOutput
    /// </summary>
    [DataContract(Name = "StateCompletionOutput")]
    public partial class StateCompletionOutput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StateCompletionOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StateCompletionOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StateCompletionOutput" /> class.
        /// </summary>
        /// <param name="completedStateId">completedStateId (required).</param>
        /// <param name="completedStateExecutionId">completedStateExecutionId (required).</param>
        /// <param name="completedStateOutput">completedStateOutput.</param>
        public StateCompletionOutput(string completedStateId = default(string), string completedStateExecutionId = default(string), EncodedObject completedStateOutput = default(EncodedObject))
        {
            // to ensure "completedStateId" is required (not null)
            if (completedStateId == null)
            {
                throw new ArgumentNullException("completedStateId is a required property for StateCompletionOutput and cannot be null");
            }
            this.CompletedStateId = completedStateId;
            // to ensure "completedStateExecutionId" is required (not null)
            if (completedStateExecutionId == null)
            {
                throw new ArgumentNullException("completedStateExecutionId is a required property for StateCompletionOutput and cannot be null");
            }
            this.CompletedStateExecutionId = completedStateExecutionId;
            this.CompletedStateOutput = completedStateOutput;
        }

        /// <summary>
        /// Gets or Sets CompletedStateId
        /// </summary>
        [DataMember(Name = "completedStateId", IsRequired = true, EmitDefaultValue = true)]
        public string CompletedStateId { get; set; }

        /// <summary>
        /// Gets or Sets CompletedStateExecutionId
        /// </summary>
        [DataMember(Name = "completedStateExecutionId", IsRequired = true, EmitDefaultValue = true)]
        public string CompletedStateExecutionId { get; set; }

        /// <summary>
        /// Gets or Sets CompletedStateOutput
        /// </summary>
        [DataMember(Name = "completedStateOutput", EmitDefaultValue = false)]
        public EncodedObject CompletedStateOutput { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StateCompletionOutput {\n");
            sb.Append("  CompletedStateId: ").Append(CompletedStateId).Append("\n");
            sb.Append("  CompletedStateExecutionId: ").Append(CompletedStateExecutionId).Append("\n");
            sb.Append("  CompletedStateOutput: ").Append(CompletedStateOutput).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
