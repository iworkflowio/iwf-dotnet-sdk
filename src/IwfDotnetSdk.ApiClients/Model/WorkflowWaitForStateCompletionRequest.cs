/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// WorkflowWaitForStateCompletionRequest
    /// </summary>
    [DataContract(Name = "WorkflowWaitForStateCompletionRequest")]
    public partial class WorkflowWaitForStateCompletionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowWaitForStateCompletionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowWaitForStateCompletionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowWaitForStateCompletionRequest" /> class.
        /// </summary>
        /// <param name="workflowId">workflowId (required).</param>
        /// <param name="stateExecutionId">stateExecutionId.</param>
        /// <param name="stateId">stateId.</param>
        /// <param name="waitForKey">waitForKey.</param>
        /// <param name="waitTimeSeconds">waitTimeSeconds.</param>
        public WorkflowWaitForStateCompletionRequest(string workflowId = default(string), string stateExecutionId = default(string), string stateId = default(string), string waitForKey = default(string), int waitTimeSeconds = default(int))
        {
            // to ensure "workflowId" is required (not null)
            if (workflowId == null)
            {
                throw new ArgumentNullException("workflowId is a required property for WorkflowWaitForStateCompletionRequest and cannot be null");
            }
            this.WorkflowId = workflowId;
            this.StateExecutionId = stateExecutionId;
            this.StateId = stateId;
            this.WaitForKey = waitForKey;
            this.WaitTimeSeconds = waitTimeSeconds;
        }

        /// <summary>
        /// Gets or Sets WorkflowId
        /// </summary>
        [DataMember(Name = "workflowId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets StateExecutionId
        /// </summary>
        [DataMember(Name = "stateExecutionId", EmitDefaultValue = false)]
        public string StateExecutionId { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name = "stateId", EmitDefaultValue = false)]
        public string StateId { get; set; }

        /// <summary>
        /// Gets or Sets WaitForKey
        /// </summary>
        [DataMember(Name = "waitForKey", EmitDefaultValue = false)]
        public string WaitForKey { get; set; }

        /// <summary>
        /// Gets or Sets WaitTimeSeconds
        /// </summary>
        [DataMember(Name = "waitTimeSeconds", EmitDefaultValue = false)]
        public int WaitTimeSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowWaitForStateCompletionRequest {\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  StateExecutionId: ").Append(StateExecutionId).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  WaitForKey: ").Append(WaitForKey).Append("\n");
            sb.Append("  WaitTimeSeconds: ").Append(WaitTimeSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
