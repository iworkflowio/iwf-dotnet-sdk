/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// ErrorResponse
    /// </summary>
    [DataContract(Name = "ErrorResponse")]
    public partial class ErrorResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SubStatus
        /// </summary>
        [DataMember(Name = "subStatus", EmitDefaultValue = false)]
        public ErrorSubStatus? SubStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        /// <param name="detail">detail.</param>
        /// <param name="subStatus">subStatus.</param>
        /// <param name="originalWorkerErrorDetail">originalWorkerErrorDetail.</param>
        /// <param name="originalWorkerErrorType">originalWorkerErrorType.</param>
        /// <param name="originalWorkerErrorStatus">originalWorkerErrorStatus.</param>
        public ErrorResponse(string detail = default(string), ErrorSubStatus? subStatus = default(ErrorSubStatus?), string originalWorkerErrorDetail = default(string), string originalWorkerErrorType = default(string), int originalWorkerErrorStatus = default(int))
        {
            this.Detail = detail;
            this.SubStatus = subStatus;
            this.OriginalWorkerErrorDetail = originalWorkerErrorDetail;
            this.OriginalWorkerErrorType = originalWorkerErrorType;
            this.OriginalWorkerErrorStatus = originalWorkerErrorStatus;
        }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", EmitDefaultValue = false)]
        public string Detail { get; set; }

        /// <summary>
        /// Gets or Sets OriginalWorkerErrorDetail
        /// </summary>
        [DataMember(Name = "originalWorkerErrorDetail", EmitDefaultValue = false)]
        public string OriginalWorkerErrorDetail { get; set; }

        /// <summary>
        /// Gets or Sets OriginalWorkerErrorType
        /// </summary>
        [DataMember(Name = "originalWorkerErrorType", EmitDefaultValue = false)]
        public string OriginalWorkerErrorType { get; set; }

        /// <summary>
        /// Gets or Sets OriginalWorkerErrorStatus
        /// </summary>
        [DataMember(Name = "originalWorkerErrorStatus", EmitDefaultValue = false)]
        public int OriginalWorkerErrorStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  SubStatus: ").Append(SubStatus).Append("\n");
            sb.Append("  OriginalWorkerErrorDetail: ").Append(OriginalWorkerErrorDetail).Append("\n");
            sb.Append("  OriginalWorkerErrorType: ").Append(OriginalWorkerErrorType).Append("\n");
            sb.Append("  OriginalWorkerErrorStatus: ").Append(OriginalWorkerErrorStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
