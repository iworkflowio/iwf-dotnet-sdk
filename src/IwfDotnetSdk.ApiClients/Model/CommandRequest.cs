/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// CommandRequest
    /// </summary>
    [DataContract(Name = "CommandRequest")]
    public partial class CommandRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CommandWaitingType
        /// </summary>
        [DataMember(Name = "commandWaitingType", IsRequired = true, EmitDefaultValue = true)]
        public CommandWaitingType CommandWaitingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommandRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandRequest" /> class.
        /// </summary>
        /// <param name="commandWaitingType">commandWaitingType (required).</param>
        /// <param name="timerCommands">timerCommands.</param>
        /// <param name="signalCommands">signalCommands.</param>
        /// <param name="interStateChannelCommands">interStateChannelCommands.</param>
        /// <param name="commandCombinations">commandCombinations.</param>
        public CommandRequest(CommandWaitingType commandWaitingType = default(CommandWaitingType), List<TimerCommand> timerCommands = default(List<TimerCommand>), List<SignalCommand> signalCommands = default(List<SignalCommand>), List<InterStateChannelCommand> interStateChannelCommands = default(List<InterStateChannelCommand>), List<CommandCombination> commandCombinations = default(List<CommandCombination>))
        {
            this.CommandWaitingType = commandWaitingType;
            this.TimerCommands = timerCommands;
            this.SignalCommands = signalCommands;
            this.InterStateChannelCommands = interStateChannelCommands;
            this.CommandCombinations = commandCombinations;
        }

        /// <summary>
        /// Gets or Sets TimerCommands
        /// </summary>
        [DataMember(Name = "timerCommands", EmitDefaultValue = false)]
        public List<TimerCommand> TimerCommands { get; set; }

        /// <summary>
        /// Gets or Sets SignalCommands
        /// </summary>
        [DataMember(Name = "signalCommands", EmitDefaultValue = false)]
        public List<SignalCommand> SignalCommands { get; set; }

        /// <summary>
        /// Gets or Sets InterStateChannelCommands
        /// </summary>
        [DataMember(Name = "interStateChannelCommands", EmitDefaultValue = false)]
        public List<InterStateChannelCommand> InterStateChannelCommands { get; set; }

        /// <summary>
        /// Gets or Sets CommandCombinations
        /// </summary>
        [DataMember(Name = "commandCombinations", EmitDefaultValue = false)]
        public List<CommandCombination> CommandCombinations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommandRequest {\n");
            sb.Append("  CommandWaitingType: ").Append(CommandWaitingType).Append("\n");
            sb.Append("  TimerCommands: ").Append(TimerCommands).Append("\n");
            sb.Append("  SignalCommands: ").Append(SignalCommands).Append("\n");
            sb.Append("  InterStateChannelCommands: ").Append(InterStateChannelCommands).Append("\n");
            sb.Append("  CommandCombinations: ").Append(CommandCombinations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
