/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// RetryPolicy
    /// </summary>
    [DataContract(Name = "RetryPolicy")]
    public partial class RetryPolicy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetryPolicy" /> class.
        /// </summary>
        /// <param name="initialIntervalSeconds">initialIntervalSeconds.</param>
        /// <param name="backoffCoefficient">backoffCoefficient.</param>
        /// <param name="maximumIntervalSeconds">maximumIntervalSeconds.</param>
        /// <param name="maximumAttempts">maximumAttempts.</param>
        /// <param name="maximumAttemptsDurationSeconds">maximumAttemptsDurationSeconds.</param>
        public RetryPolicy(int initialIntervalSeconds = default(int), float backoffCoefficient = default(float), int maximumIntervalSeconds = default(int), int maximumAttempts = default(int), int maximumAttemptsDurationSeconds = default(int))
        {
            this.InitialIntervalSeconds = initialIntervalSeconds;
            this.BackoffCoefficient = backoffCoefficient;
            this.MaximumIntervalSeconds = maximumIntervalSeconds;
            this.MaximumAttempts = maximumAttempts;
            this.MaximumAttemptsDurationSeconds = maximumAttemptsDurationSeconds;
        }

        /// <summary>
        /// Gets or Sets InitialIntervalSeconds
        /// </summary>
        [DataMember(Name = "initialIntervalSeconds", EmitDefaultValue = false)]
        public int InitialIntervalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets BackoffCoefficient
        /// </summary>
        [DataMember(Name = "backoffCoefficient", EmitDefaultValue = false)]
        public float BackoffCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets MaximumIntervalSeconds
        /// </summary>
        [DataMember(Name = "maximumIntervalSeconds", EmitDefaultValue = false)]
        public int MaximumIntervalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAttempts
        /// </summary>
        [DataMember(Name = "maximumAttempts", EmitDefaultValue = false)]
        public int MaximumAttempts { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAttemptsDurationSeconds
        /// </summary>
        [DataMember(Name = "maximumAttemptsDurationSeconds", EmitDefaultValue = false)]
        public int MaximumAttemptsDurationSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetryPolicy {\n");
            sb.Append("  InitialIntervalSeconds: ").Append(InitialIntervalSeconds).Append("\n");
            sb.Append("  BackoffCoefficient: ").Append(BackoffCoefficient).Append("\n");
            sb.Append("  MaximumIntervalSeconds: ").Append(MaximumIntervalSeconds).Append("\n");
            sb.Append("  MaximumAttempts: ").Append(MaximumAttempts).Append("\n");
            sb.Append("  MaximumAttemptsDurationSeconds: ").Append(MaximumAttemptsDurationSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
