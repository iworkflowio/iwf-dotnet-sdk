/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// CommandResults
    /// </summary>
    [DataContract(Name = "CommandResults")]
    public partial class CommandResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandResults" /> class.
        /// </summary>
        /// <param name="signalResults">signalResults.</param>
        /// <param name="interStateChannelResults">interStateChannelResults.</param>
        /// <param name="timerResults">timerResults.</param>
        /// <param name="stateStartApiSucceeded">stateStartApiSucceeded.</param>
        public CommandResults(List<SignalResult> signalResults = default(List<SignalResult>), List<InterStateChannelResult> interStateChannelResults = default(List<InterStateChannelResult>), List<TimerResult> timerResults = default(List<TimerResult>), bool stateStartApiSucceeded = default(bool))
        {
            this.SignalResults = signalResults;
            this.InterStateChannelResults = interStateChannelResults;
            this.TimerResults = timerResults;
            this.StateStartApiSucceeded = stateStartApiSucceeded;
        }

        /// <summary>
        /// Gets or Sets SignalResults
        /// </summary>
        [DataMember(Name = "signalResults", EmitDefaultValue = false)]
        public List<SignalResult> SignalResults { get; set; }

        /// <summary>
        /// Gets or Sets InterStateChannelResults
        /// </summary>
        [DataMember(Name = "interStateChannelResults", EmitDefaultValue = false)]
        public List<InterStateChannelResult> InterStateChannelResults { get; set; }

        /// <summary>
        /// Gets or Sets TimerResults
        /// </summary>
        [DataMember(Name = "timerResults", EmitDefaultValue = false)]
        public List<TimerResult> TimerResults { get; set; }

        /// <summary>
        /// Gets or Sets StateStartApiSucceeded
        /// </summary>
        [DataMember(Name = "stateStartApiSucceeded", EmitDefaultValue = true)]
        public bool StateStartApiSucceeded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommandResults {\n");
            sb.Append("  SignalResults: ").Append(SignalResults).Append("\n");
            sb.Append("  InterStateChannelResults: ").Append(InterStateChannelResults).Append("\n");
            sb.Append("  TimerResults: ").Append(TimerResults).Append("\n");
            sb.Append("  StateStartApiSucceeded: ").Append(StateStartApiSucceeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
