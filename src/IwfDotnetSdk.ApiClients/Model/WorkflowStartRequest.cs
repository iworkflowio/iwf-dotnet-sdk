/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// WorkflowStartRequest
    /// </summary>
    [DataContract(Name = "WorkflowStartRequest")]
    public partial class WorkflowStartRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStartRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowStartRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStartRequest" /> class.
        /// </summary>
        /// <param name="workflowId">workflowId (required).</param>
        /// <param name="iwfWorkflowType">iwfWorkflowType (required).</param>
        /// <param name="workflowTimeoutSeconds">workflowTimeoutSeconds (required).</param>
        /// <param name="iwfWorkerUrl">iwfWorkerUrl (required).</param>
        /// <param name="startStateId">startStateId.</param>
        /// <param name="waitForCompletionStateIds">waitForCompletionStateIds.</param>
        /// <param name="waitForCompletionStateExecutionIds">waitForCompletionStateExecutionIds.</param>
        /// <param name="stateInput">stateInput.</param>
        /// <param name="stateOptions">stateOptions.</param>
        /// <param name="workflowStartOptions">workflowStartOptions.</param>
        public WorkflowStartRequest(string workflowId = default(string), string iwfWorkflowType = default(string), int workflowTimeoutSeconds = default(int), string iwfWorkerUrl = default(string), string startStateId = default(string), List<string> waitForCompletionStateIds = default(List<string>), List<string> waitForCompletionStateExecutionIds = default(List<string>), EncodedObject stateInput = default(EncodedObject), WorkflowStateOptions stateOptions = default(WorkflowStateOptions), WorkflowStartOptions workflowStartOptions = default(WorkflowStartOptions))
        {
            // to ensure "workflowId" is required (not null)
            if (workflowId == null)
            {
                throw new ArgumentNullException("workflowId is a required property for WorkflowStartRequest and cannot be null");
            }
            this.WorkflowId = workflowId;
            // to ensure "iwfWorkflowType" is required (not null)
            if (iwfWorkflowType == null)
            {
                throw new ArgumentNullException("iwfWorkflowType is a required property for WorkflowStartRequest and cannot be null");
            }
            this.IwfWorkflowType = iwfWorkflowType;
            this.WorkflowTimeoutSeconds = workflowTimeoutSeconds;
            // to ensure "iwfWorkerUrl" is required (not null)
            if (iwfWorkerUrl == null)
            {
                throw new ArgumentNullException("iwfWorkerUrl is a required property for WorkflowStartRequest and cannot be null");
            }
            this.IwfWorkerUrl = iwfWorkerUrl;
            this.StartStateId = startStateId;
            this.WaitForCompletionStateIds = waitForCompletionStateIds;
            this.WaitForCompletionStateExecutionIds = waitForCompletionStateExecutionIds;
            this.StateInput = stateInput;
            this.StateOptions = stateOptions;
            this.WorkflowStartOptions = workflowStartOptions;
        }

        /// <summary>
        /// Gets or Sets WorkflowId
        /// </summary>
        [DataMember(Name = "workflowId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Gets or Sets IwfWorkflowType
        /// </summary>
        [DataMember(Name = "iwfWorkflowType", IsRequired = true, EmitDefaultValue = true)]
        public string IwfWorkflowType { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowTimeoutSeconds
        /// </summary>
        [DataMember(Name = "workflowTimeoutSeconds", IsRequired = true, EmitDefaultValue = true)]
        public int WorkflowTimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets IwfWorkerUrl
        /// </summary>
        [DataMember(Name = "iwfWorkerUrl", IsRequired = true, EmitDefaultValue = true)]
        public string IwfWorkerUrl { get; set; }

        /// <summary>
        /// Gets or Sets StartStateId
        /// </summary>
        [DataMember(Name = "startStateId", EmitDefaultValue = false)]
        public string StartStateId { get; set; }

        /// <summary>
        /// Gets or Sets WaitForCompletionStateIds
        /// </summary>
        [DataMember(Name = "waitForCompletionStateIds", EmitDefaultValue = false)]
        public List<string> WaitForCompletionStateIds { get; set; }

        /// <summary>
        /// Gets or Sets WaitForCompletionStateExecutionIds
        /// </summary>
        [DataMember(Name = "waitForCompletionStateExecutionIds", EmitDefaultValue = false)]
        public List<string> WaitForCompletionStateExecutionIds { get; set; }

        /// <summary>
        /// Gets or Sets StateInput
        /// </summary>
        [DataMember(Name = "stateInput", EmitDefaultValue = false)]
        public EncodedObject StateInput { get; set; }

        /// <summary>
        /// Gets or Sets StateOptions
        /// </summary>
        [DataMember(Name = "stateOptions", EmitDefaultValue = false)]
        public WorkflowStateOptions StateOptions { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowStartOptions
        /// </summary>
        [DataMember(Name = "workflowStartOptions", EmitDefaultValue = false)]
        public WorkflowStartOptions WorkflowStartOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowStartRequest {\n");
            sb.Append("  WorkflowId: ").Append(WorkflowId).Append("\n");
            sb.Append("  IwfWorkflowType: ").Append(IwfWorkflowType).Append("\n");
            sb.Append("  WorkflowTimeoutSeconds: ").Append(WorkflowTimeoutSeconds).Append("\n");
            sb.Append("  IwfWorkerUrl: ").Append(IwfWorkerUrl).Append("\n");
            sb.Append("  StartStateId: ").Append(StartStateId).Append("\n");
            sb.Append("  WaitForCompletionStateIds: ").Append(WaitForCompletionStateIds).Append("\n");
            sb.Append("  WaitForCompletionStateExecutionIds: ").Append(WaitForCompletionStateExecutionIds).Append("\n");
            sb.Append("  StateInput: ").Append(StateInput).Append("\n");
            sb.Append("  StateOptions: ").Append(StateOptions).Append("\n");
            sb.Append("  WorkflowStartOptions: ").Append(WorkflowStartOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
