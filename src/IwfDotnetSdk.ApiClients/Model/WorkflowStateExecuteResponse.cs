/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// WorkflowStateExecuteResponse
    /// </summary>
    [DataContract(Name = "WorkflowStateExecuteResponse")]
    public partial class WorkflowStateExecuteResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStateExecuteResponse" /> class.
        /// </summary>
        /// <param name="localActivityInput">localActivityInput.</param>
        /// <param name="stateDecision">stateDecision.</param>
        /// <param name="upsertSearchAttributes">upsertSearchAttributes.</param>
        /// <param name="upsertDataObjects">upsertDataObjects.</param>
        /// <param name="recordEvents">recordEvents.</param>
        /// <param name="upsertStateLocals">upsertStateLocals.</param>
        /// <param name="publishToInterStateChannel">publishToInterStateChannel.</param>
        public WorkflowStateExecuteResponse(string localActivityInput = default(string), StateDecision stateDecision = default(StateDecision), List<SearchAttribute> upsertSearchAttributes = default(List<SearchAttribute>), List<KeyValue> upsertDataObjects = default(List<KeyValue>), List<KeyValue> recordEvents = default(List<KeyValue>), List<KeyValue> upsertStateLocals = default(List<KeyValue>), List<InterStateChannelPublishing> publishToInterStateChannel = default(List<InterStateChannelPublishing>))
        {
            this.LocalActivityInput = localActivityInput;
            this.StateDecision = stateDecision;
            this.UpsertSearchAttributes = upsertSearchAttributes;
            this.UpsertDataObjects = upsertDataObjects;
            this.RecordEvents = recordEvents;
            this.UpsertStateLocals = upsertStateLocals;
            this.PublishToInterStateChannel = publishToInterStateChannel;
        }

        /// <summary>
        /// Gets or Sets LocalActivityInput
        /// </summary>
        [DataMember(Name = "localActivityInput", EmitDefaultValue = false)]
        public string LocalActivityInput { get; set; }

        /// <summary>
        /// Gets or Sets StateDecision
        /// </summary>
        [DataMember(Name = "stateDecision", EmitDefaultValue = false)]
        public StateDecision StateDecision { get; set; }

        /// <summary>
        /// Gets or Sets UpsertSearchAttributes
        /// </summary>
        [DataMember(Name = "upsertSearchAttributes", EmitDefaultValue = false)]
        public List<SearchAttribute> UpsertSearchAttributes { get; set; }

        /// <summary>
        /// Gets or Sets UpsertDataObjects
        /// </summary>
        [DataMember(Name = "upsertDataObjects", EmitDefaultValue = false)]
        public List<KeyValue> UpsertDataObjects { get; set; }

        /// <summary>
        /// Gets or Sets RecordEvents
        /// </summary>
        [DataMember(Name = "recordEvents", EmitDefaultValue = false)]
        public List<KeyValue> RecordEvents { get; set; }

        /// <summary>
        /// Gets or Sets UpsertStateLocals
        /// </summary>
        [DataMember(Name = "upsertStateLocals", EmitDefaultValue = false)]
        public List<KeyValue> UpsertStateLocals { get; set; }

        /// <summary>
        /// Gets or Sets PublishToInterStateChannel
        /// </summary>
        [DataMember(Name = "publishToInterStateChannel", EmitDefaultValue = false)]
        public List<InterStateChannelPublishing> PublishToInterStateChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowStateExecuteResponse {\n");
            sb.Append("  LocalActivityInput: ").Append(LocalActivityInput).Append("\n");
            sb.Append("  StateDecision: ").Append(StateDecision).Append("\n");
            sb.Append("  UpsertSearchAttributes: ").Append(UpsertSearchAttributes).Append("\n");
            sb.Append("  UpsertDataObjects: ").Append(UpsertDataObjects).Append("\n");
            sb.Append("  RecordEvents: ").Append(RecordEvents).Append("\n");
            sb.Append("  UpsertStateLocals: ").Append(UpsertStateLocals).Append("\n");
            sb.Append("  PublishToInterStateChannel: ").Append(PublishToInterStateChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
