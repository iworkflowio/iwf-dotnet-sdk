/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// WorkflowStartOptions
    /// </summary>
    [DataContract(Name = "WorkflowStartOptions")]
    public partial class WorkflowStartOptions : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets IdReusePolicy
        /// </summary>
        [DataMember(Name = "idReusePolicy", EmitDefaultValue = false)]
        public IDReusePolicy? IdReusePolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStartOptions" /> class.
        /// </summary>
        /// <param name="idReusePolicy">idReusePolicy.</param>
        /// <param name="cronSchedule">cronSchedule.</param>
        /// <param name="workflowStartDelaySeconds">workflowStartDelaySeconds.</param>
        /// <param name="retryPolicy">retryPolicy.</param>
        /// <param name="searchAttributes">searchAttributes.</param>
        /// <param name="dataAttributes">dataAttributes.</param>
        /// <param name="workflowConfigOverride">workflowConfigOverride.</param>
        /// <param name="useMemoForDataAttributes">useMemoForDataAttributes.</param>
        /// <param name="workflowAlreadyStartedOptions">workflowAlreadyStartedOptions.</param>
        public WorkflowStartOptions(IDReusePolicy? idReusePolicy = default(IDReusePolicy?), string cronSchedule = default(string), int workflowStartDelaySeconds = default(int), WorkflowRetryPolicy retryPolicy = default(WorkflowRetryPolicy), List<SearchAttribute> searchAttributes = default(List<SearchAttribute>), List<KeyValue> dataAttributes = default(List<KeyValue>), WorkflowConfig workflowConfigOverride = default(WorkflowConfig), bool useMemoForDataAttributes = default(bool), WorkflowAlreadyStartedOptions workflowAlreadyStartedOptions = default(WorkflowAlreadyStartedOptions))
        {
            this.IdReusePolicy = idReusePolicy;
            this.CronSchedule = cronSchedule;
            this.WorkflowStartDelaySeconds = workflowStartDelaySeconds;
            this.RetryPolicy = retryPolicy;
            this.SearchAttributes = searchAttributes;
            this.DataAttributes = dataAttributes;
            this.WorkflowConfigOverride = workflowConfigOverride;
            this.UseMemoForDataAttributes = useMemoForDataAttributes;
            this.WorkflowAlreadyStartedOptions = workflowAlreadyStartedOptions;
        }

        /// <summary>
        /// Gets or Sets CronSchedule
        /// </summary>
        [DataMember(Name = "cronSchedule", EmitDefaultValue = false)]
        public string CronSchedule { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowStartDelaySeconds
        /// </summary>
        [DataMember(Name = "workflowStartDelaySeconds", EmitDefaultValue = false)]
        public int WorkflowStartDelaySeconds { get; set; }

        /// <summary>
        /// Gets or Sets RetryPolicy
        /// </summary>
        [DataMember(Name = "retryPolicy", EmitDefaultValue = false)]
        public WorkflowRetryPolicy RetryPolicy { get; set; }

        /// <summary>
        /// Gets or Sets SearchAttributes
        /// </summary>
        [DataMember(Name = "searchAttributes", EmitDefaultValue = false)]
        public List<SearchAttribute> SearchAttributes { get; set; }

        /// <summary>
        /// Gets or Sets DataAttributes
        /// </summary>
        [DataMember(Name = "dataAttributes", EmitDefaultValue = false)]
        public List<KeyValue> DataAttributes { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowConfigOverride
        /// </summary>
        [DataMember(Name = "workflowConfigOverride", EmitDefaultValue = false)]
        public WorkflowConfig WorkflowConfigOverride { get; set; }

        /// <summary>
        /// Gets or Sets UseMemoForDataAttributes
        /// </summary>
        [DataMember(Name = "useMemoForDataAttributes", EmitDefaultValue = true)]
        public bool UseMemoForDataAttributes { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowAlreadyStartedOptions
        /// </summary>
        [DataMember(Name = "workflowAlreadyStartedOptions", EmitDefaultValue = false)]
        public WorkflowAlreadyStartedOptions WorkflowAlreadyStartedOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowStartOptions {\n");
            sb.Append("  IdReusePolicy: ").Append(IdReusePolicy).Append("\n");
            sb.Append("  CronSchedule: ").Append(CronSchedule).Append("\n");
            sb.Append("  WorkflowStartDelaySeconds: ").Append(WorkflowStartDelaySeconds).Append("\n");
            sb.Append("  RetryPolicy: ").Append(RetryPolicy).Append("\n");
            sb.Append("  SearchAttributes: ").Append(SearchAttributes).Append("\n");
            sb.Append("  DataAttributes: ").Append(DataAttributes).Append("\n");
            sb.Append("  WorkflowConfigOverride: ").Append(WorkflowConfigOverride).Append("\n");
            sb.Append("  UseMemoForDataAttributes: ").Append(UseMemoForDataAttributes).Append("\n");
            sb.Append("  WorkflowAlreadyStartedOptions: ").Append(WorkflowAlreadyStartedOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
