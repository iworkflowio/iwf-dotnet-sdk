/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// StateMovement
    /// </summary>
    [DataContract(Name = "StateMovement")]
    public partial class StateMovement : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StateMovement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StateMovement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StateMovement" /> class.
        /// </summary>
        /// <param name="stateId">stateId (required).</param>
        /// <param name="stateInput">stateInput.</param>
        /// <param name="stateOptions">stateOptions.</param>
        /// <param name="waitForKey">waitForKey.</param>
        public StateMovement(string stateId = default(string), EncodedObject stateInput = default(EncodedObject), WorkflowStateOptions stateOptions = default(WorkflowStateOptions), string waitForKey = default(string))
        {
            // to ensure "stateId" is required (not null)
            if (stateId == null)
            {
                throw new ArgumentNullException("stateId is a required property for StateMovement and cannot be null");
            }
            this.StateId = stateId;
            this.StateInput = stateInput;
            this.StateOptions = stateOptions;
            this.WaitForKey = waitForKey;
        }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>
        [DataMember(Name = "stateId", IsRequired = true, EmitDefaultValue = true)]
        public string StateId { get; set; }

        /// <summary>
        /// Gets or Sets StateInput
        /// </summary>
        [DataMember(Name = "stateInput", EmitDefaultValue = false)]
        public EncodedObject StateInput { get; set; }

        /// <summary>
        /// Gets or Sets StateOptions
        /// </summary>
        [DataMember(Name = "stateOptions", EmitDefaultValue = false)]
        public WorkflowStateOptions StateOptions { get; set; }

        /// <summary>
        /// Gets or Sets WaitForKey
        /// </summary>
        [DataMember(Name = "waitForKey", EmitDefaultValue = false)]
        public string WaitForKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StateMovement {\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  StateInput: ").Append(StateInput).Append("\n");
            sb.Append("  StateOptions: ").Append(StateOptions).Append("\n");
            sb.Append("  WaitForKey: ").Append(WaitForKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
