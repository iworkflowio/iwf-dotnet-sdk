/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// WorkflowGetResponse
    /// </summary>
    [DataContract(Name = "WorkflowGetResponse")]
    public partial class WorkflowGetResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets WorkflowStatus
        /// </summary>
        [DataMember(Name = "workflowStatus", IsRequired = true, EmitDefaultValue = true)]
        public WorkflowStatus WorkflowStatus { get; set; }

        /// <summary>
        /// Gets or Sets ErrorType
        /// </summary>
        [DataMember(Name = "errorType", EmitDefaultValue = false)]
        public WorkflowErrorType? ErrorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowGetResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowGetResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowGetResponse" /> class.
        /// </summary>
        /// <param name="workflowRunId">workflowRunId (required).</param>
        /// <param name="workflowStatus">workflowStatus (required).</param>
        /// <param name="results">results.</param>
        /// <param name="errorType">errorType.</param>
        /// <param name="errorMessage">errorMessage.</param>
        public WorkflowGetResponse(string workflowRunId = default(string), WorkflowStatus workflowStatus = default(WorkflowStatus), List<StateCompletionOutput> results = default(List<StateCompletionOutput>), WorkflowErrorType? errorType = default(WorkflowErrorType?), string errorMessage = default(string))
        {
            // to ensure "workflowRunId" is required (not null)
            if (workflowRunId == null)
            {
                throw new ArgumentNullException("workflowRunId is a required property for WorkflowGetResponse and cannot be null");
            }
            this.WorkflowRunId = workflowRunId;
            this.WorkflowStatus = workflowStatus;
            this.Results = results;
            this.ErrorType = errorType;
            this.ErrorMessage = errorMessage;
        }

        /// <summary>
        /// Gets or Sets WorkflowRunId
        /// </summary>
        [DataMember(Name = "workflowRunId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowRunId { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<StateCompletionOutput> Results { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowGetResponse {\n");
            sb.Append("  WorkflowRunId: ").Append(WorkflowRunId).Append("\n");
            sb.Append("  WorkflowStatus: ").Append(WorkflowStatus).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  ErrorType: ").Append(ErrorType).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
