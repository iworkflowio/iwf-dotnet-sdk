/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// WorkflowConfig
    /// </summary>
    [DataContract(Name = "WorkflowConfig")]
    public partial class WorkflowConfig : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ExecutingStateIdMode
        /// </summary>
        [DataMember(Name = "executingStateIdMode", EmitDefaultValue = false)]
        public ExecutingStateIdMode? ExecutingStateIdMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowConfig" /> class.
        /// </summary>
        /// <param name="executingStateIdMode">executingStateIdMode.</param>
        /// <param name="continueAsNewThreshold">continueAsNewThreshold.</param>
        /// <param name="continueAsNewPageSizeInBytes">continueAsNewPageSizeInBytes.</param>
        /// <param name="optimizeActivity">optimizeActivity.</param>
        /// <param name="optimizeTimer">optimizeTimer.</param>
        public WorkflowConfig(ExecutingStateIdMode? executingStateIdMode = default(ExecutingStateIdMode?), int continueAsNewThreshold = default(int), int continueAsNewPageSizeInBytes = default(int), bool optimizeActivity = default(bool), bool optimizeTimer = default(bool))
        {
            this.ExecutingStateIdMode = executingStateIdMode;
            this.ContinueAsNewThreshold = continueAsNewThreshold;
            this.ContinueAsNewPageSizeInBytes = continueAsNewPageSizeInBytes;
            this.OptimizeActivity = optimizeActivity;
            this.OptimizeTimer = optimizeTimer;
        }

        /// <summary>
        /// Gets or Sets ContinueAsNewThreshold
        /// </summary>
        [DataMember(Name = "continueAsNewThreshold", EmitDefaultValue = false)]
        public int ContinueAsNewThreshold { get; set; }

        /// <summary>
        /// Gets or Sets ContinueAsNewPageSizeInBytes
        /// </summary>
        [DataMember(Name = "continueAsNewPageSizeInBytes", EmitDefaultValue = false)]
        public int ContinueAsNewPageSizeInBytes { get; set; }

        /// <summary>
        /// Gets or Sets OptimizeActivity
        /// </summary>
        [DataMember(Name = "optimizeActivity", EmitDefaultValue = true)]
        public bool OptimizeActivity { get; set; }

        /// <summary>
        /// Gets or Sets OptimizeTimer
        /// </summary>
        [DataMember(Name = "optimizeTimer", EmitDefaultValue = true)]
        public bool OptimizeTimer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowConfig {\n");
            sb.Append("  ExecutingStateIdMode: ").Append(ExecutingStateIdMode).Append("\n");
            sb.Append("  ContinueAsNewThreshold: ").Append(ContinueAsNewThreshold).Append("\n");
            sb.Append("  ContinueAsNewPageSizeInBytes: ").Append(ContinueAsNewPageSizeInBytes).Append("\n");
            sb.Append("  OptimizeActivity: ").Append(OptimizeActivity).Append("\n");
            sb.Append("  OptimizeTimer: ").Append(OptimizeTimer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
