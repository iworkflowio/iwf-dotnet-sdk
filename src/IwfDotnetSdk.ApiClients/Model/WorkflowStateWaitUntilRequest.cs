/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// WorkflowStateWaitUntilRequest
    /// </summary>
    [DataContract(Name = "WorkflowStateWaitUntilRequest")]
    public partial class WorkflowStateWaitUntilRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStateWaitUntilRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkflowStateWaitUntilRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowStateWaitUntilRequest" /> class.
        /// </summary>
        /// <param name="context">context (required).</param>
        /// <param name="workflowType">workflowType (required).</param>
        /// <param name="workflowStateId">workflowStateId (required).</param>
        /// <param name="stateInput">stateInput.</param>
        /// <param name="searchAttributes">searchAttributes.</param>
        /// <param name="dataObjects">dataObjects.</param>
        public WorkflowStateWaitUntilRequest(Context context = default(Context), string workflowType = default(string), string workflowStateId = default(string), EncodedObject stateInput = default(EncodedObject), List<SearchAttribute> searchAttributes = default(List<SearchAttribute>), List<KeyValue> dataObjects = default(List<KeyValue>))
        {
            // to ensure "context" is required (not null)
            if (context == null)
            {
                throw new ArgumentNullException("context is a required property for WorkflowStateWaitUntilRequest and cannot be null");
            }
            this.Context = context;
            // to ensure "workflowType" is required (not null)
            if (workflowType == null)
            {
                throw new ArgumentNullException("workflowType is a required property for WorkflowStateWaitUntilRequest and cannot be null");
            }
            this.WorkflowType = workflowType;
            // to ensure "workflowStateId" is required (not null)
            if (workflowStateId == null)
            {
                throw new ArgumentNullException("workflowStateId is a required property for WorkflowStateWaitUntilRequest and cannot be null");
            }
            this.WorkflowStateId = workflowStateId;
            this.StateInput = stateInput;
            this.SearchAttributes = searchAttributes;
            this.DataObjects = dataObjects;
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", IsRequired = true, EmitDefaultValue = true)]
        public Context Context { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowType
        /// </summary>
        [DataMember(Name = "workflowType", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowType { get; set; }

        /// <summary>
        /// Gets or Sets WorkflowStateId
        /// </summary>
        [DataMember(Name = "workflowStateId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkflowStateId { get; set; }

        /// <summary>
        /// Gets or Sets StateInput
        /// </summary>
        [DataMember(Name = "stateInput", EmitDefaultValue = false)]
        public EncodedObject StateInput { get; set; }

        /// <summary>
        /// Gets or Sets SearchAttributes
        /// </summary>
        [DataMember(Name = "searchAttributes", EmitDefaultValue = false)]
        public List<SearchAttribute> SearchAttributes { get; set; }

        /// <summary>
        /// Gets or Sets DataObjects
        /// </summary>
        [DataMember(Name = "dataObjects", EmitDefaultValue = false)]
        public List<KeyValue> DataObjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkflowStateWaitUntilRequest {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  WorkflowType: ").Append(WorkflowType).Append("\n");
            sb.Append("  WorkflowStateId: ").Append(WorkflowStateId).Append("\n");
            sb.Append("  StateInput: ").Append(StateInput).Append("\n");
            sb.Append("  SearchAttributes: ").Append(SearchAttributes).Append("\n");
            sb.Append("  DataObjects: ").Append(DataObjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
