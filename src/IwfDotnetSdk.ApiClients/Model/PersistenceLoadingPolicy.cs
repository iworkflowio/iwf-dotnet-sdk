/*
 * Workflow APIs
 *
 * This APIs for iwf SDKs to operate workflows
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IwfDotnetSdk.ApiClients.Client.OpenAPIDateConverter;

namespace IwfDotnetSdk.ApiClients.Model
{
    /// <summary>
    /// PersistenceLoadingPolicy
    /// </summary>
    [DataContract(Name = "PersistenceLoadingPolicy")]
    public partial class PersistenceLoadingPolicy : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PersistenceLoadingType
        /// </summary>
        [DataMember(Name = "persistenceLoadingType", EmitDefaultValue = false)]
        public PersistenceLoadingType? PersistenceLoadingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersistenceLoadingPolicy" /> class.
        /// </summary>
        /// <param name="persistenceLoadingType">persistenceLoadingType.</param>
        /// <param name="partialLoadingKeys">partialLoadingKeys.</param>
        /// <param name="lockingKeys">lockingKeys.</param>
        /// <param name="useKeyAsPrefix">useKeyAsPrefix.</param>
        public PersistenceLoadingPolicy(PersistenceLoadingType? persistenceLoadingType = default(PersistenceLoadingType?), List<string> partialLoadingKeys = default(List<string>), List<string> lockingKeys = default(List<string>), bool useKeyAsPrefix = default(bool))
        {
            this.PersistenceLoadingType = persistenceLoadingType;
            this.PartialLoadingKeys = partialLoadingKeys;
            this.LockingKeys = lockingKeys;
            this.UseKeyAsPrefix = useKeyAsPrefix;
        }

        /// <summary>
        /// Gets or Sets PartialLoadingKeys
        /// </summary>
        [DataMember(Name = "partialLoadingKeys", EmitDefaultValue = false)]
        public List<string> PartialLoadingKeys { get; set; }

        /// <summary>
        /// Gets or Sets LockingKeys
        /// </summary>
        [DataMember(Name = "lockingKeys", EmitDefaultValue = false)]
        public List<string> LockingKeys { get; set; }

        /// <summary>
        /// Gets or Sets UseKeyAsPrefix
        /// </summary>
        [DataMember(Name = "useKeyAsPrefix", EmitDefaultValue = true)]
        public bool UseKeyAsPrefix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersistenceLoadingPolicy {\n");
            sb.Append("  PersistenceLoadingType: ").Append(PersistenceLoadingType).Append("\n");
            sb.Append("  PartialLoadingKeys: ").Append(PartialLoadingKeys).Append("\n");
            sb.Append("  LockingKeys: ").Append(LockingKeys).Append("\n");
            sb.Append("  UseKeyAsPrefix: ").Append(UseKeyAsPrefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
